---
alwaysApply: true
---
Use https://mastergroosha.github.io/aiogram-3-guide/ for development
Use magic filter aiogram
Use module system development
---
alwaysApply: true
---

- Всегда отвечай на русском языке.
- Соблюдай модульную систему.
- Для backend используй Python 3.10+ и FastAPI, придерживайся стиля PEP8.
- Все функции и методы должны содержать type hints.
- Каждый публичный класс и функция должны иметь docstring на русском языке.
- Не используй глобальные переменные.
- Для асинхронных операций используй только async/await.
- Для HTTP-запросов в Python используй httpx по-возможности, а не requests.
- Для frontend, если это необходимо, используй React/React Native с TypeScript.
- Все новые компоненты должны быть типизированы (TypeScript).
- Все комментарии в коде — на русском языке.
- Все коммиты должны соответствовать Conventional Commits (feat:, fix:, docs: и т.д.).
- Не добавляй сторонние библиотеки без согласования.
- Документацию и примеры кода оформляй в стиле, принятом в README.md проекта.
- Учитывай мультиплатформенность (Windows, WSL2, Linux, macOS) при генерации кода и инструкций.

# Безопасность
- Не храни секретные ключи, пароли и токены в коде — используй переменные окружения (.env).
- Не коммить файлы с секретами (например, .env, credentials.json) в репозиторий.
- Для хранения паролей используй только безопасные хэш-функции.
- Все внешние API-запросы должны быть защищены (HTTPS).
- Не логируй персональные данные пользователей.
- Для всех пользовательских данных применяй валидацию и санитацию.
- Не используй устаревшие или небезопасные библиотеки.
- Регулярно обновляй зависимости и проверяй их на уязвимости.
- Для frontend не храни токены в localStorage, используй httpOnly cookies.
- Все ошибки, связанные с безопасностью, логируй только на сервере, не раскрывая детали клиенту.
- Для межсервисного взаимодействия используй защищённые каналы (например, mTLS или VPN).
- Не допускай CORS-уязвимостей — явно указывай разрешённые источники.
- Для критичных операций (смена пароля, перевод средств) реализуй дополнительную проверку (2FA, подтверждение по email/SMS).

# Документирование процесса
- При создании нового файла добавляй в его начало блок:
  /**
   * @file: [имя файла]
   * @description: [краткое описание]
   * @dependencies: [связанные компоненты/файлы]
   * @created: [дата]
   */
- После реализации нового функционала актуализируй /docs/project.md (архитектура, новые компоненты, схемы).
- Поддерживай актуальную документацию API и интерфейсов.

- Каждый значимый шаг фиксируй в /docs/changelog.md (журнал изменений) и /docs/tasktracker.md (статус задач).
- В changelog.md используй формат:
  ## [DD-MM-YYYY] - Краткое описание изменений
  ### Добавлено
  - Описание новых функций
  ### Изменено
  - Описание модификаций
  ### Исправлено
  - Описание исправлений
- В tasktracker.md используй формат:
  ## Задача: [Название задачи]
  - **Статус**: [Не начата/В процессе/Завершена]
  - **Описание**: [Детальное описание]
  - **Шаги выполнения**:
    - [x] Завершенный шаг
    - [ ] Текущий шаг
    - [ ] Запланированный шаг
  - **Зависимости**: [Связи с другими задачами]

# Процесс разработки
- Перед началом каждого нового шага спрашивай подтверждение владельца проекта.
- После каждого шага предоставляй краткое резюме изменений (до 5 пунктов).
- При технических проблемах или неоднозначностях предлагай 2-3 альтернативных подхода.
- Всегда сохраняй контекст текущей задачи и общую цель проекта.
- Периодически напоминай о статусе задачи и оставшихся шагах.
- Следуй архитектурным решениям и стандартам из Project.md.
- Соблюдай принципы SOLID, KISS, DRY, YAGNI и Бритвы Окама.
- Проводить code review для всех изменений.
- Используй единый стиль кодирования (линтеры, pre-commit hooks).
- Не оставляй неиспользуемый код и комментарии.

# Коммуникация
- Если не уверен в требованиях — задавай конкретные вопросы.
- При предложении вариантов реализации объясняй плюсы и минусы каждого.
- Для объёмных задач предлагай разбивку на подзадачи.
- В конце каждой сессии делай краткий отчёт о прогрессе и планах.

# Общее правило
- При любых изменениях сначала актуализируй документацию, затем переходи к следующему шагу разработки.

