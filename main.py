"""
@file: main.py
@description: –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
@dependencies: aiogram, config, utils, handlers, services
@created: 2024-01-15
"""

import asyncio
import logging
import signal
import sys
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from config import config
from utils.logger import setup_logging, bot_logger
from handlers import user_router, admin_router

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
bot_instance = None
dp_instance = None
shutdown_event = asyncio.Event()

def signal_handler(signum, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    
    Args:
        signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
        frame: –¢–µ–∫—É—â–∏–π –∫–∞–¥—Ä —Å—Ç–µ–∫–∞
    """
    bot_logger.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    shutdown_event.set()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
if sys.platform != "win32":  # –ù–∞ Windows —Å–∏–≥–Ω–∞–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # SIGTERM


async def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    –í–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ graceful shutdown.
    
    Returns:
        None
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(
        log_file=config.logging.file,
        log_level=config.logging.level
    )
    
    bot_logger.logger.info("üöÄ –ó–∞–ø—É—Å–∫ BookClub Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    global bot_instance, dp_instance
    bot_instance = Bot(token=config.bot_token)
    storage = MemoryStorage()
    dp_instance = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp_instance.include_router(user_router)
    dp_instance.include_router(admin_router)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    @dp_instance.error()
    async def error_handler(update, exception):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        
        –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            
        Returns:
            None
        """
        bot_logger.log_error(exception, f"update: {update}")
        return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    async def on_shutdown():
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown
        
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –∑–∞–∫—Ä—ã–≤–∞—è –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        –∏ —Å–æ—Ö—Ä–∞–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        bot_logger.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            if dp_instance:
                await dp_instance.stop_polling()
                bot_logger.logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if bot_instance:
                await bot_instance.session.close()
                bot_logger.logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ storage
            await storage.close()
            bot_logger.logger.info("‚úÖ Storage –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            bot_logger.log_error(e, "–æ—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown")
        finally:
            bot_logger.logger.info("‚úÖ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ shutdown
    dp_instance.shutdown.register(on_shutdown)
    
    try:
        bot_logger.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤
        polling_task = asyncio.create_task(
            dp_instance.start_polling(bot_instance, skip_updates=True)
        )
        
        # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π await, –Ω–∞ Unix - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤
        if sys.platform == "win32":
            await polling_task
        else:
            # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ shutdown
            await asyncio.wait(
                [polling_task, shutdown_event.wait()],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª shutdown, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            if shutdown_event.is_set():
                bot_logger.logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
                polling_task.cancel()
                try:
                    await polling_task
                except asyncio.CancelledError:
                    pass
        
    except KeyboardInterrupt:
        bot_logger.logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
    except Exception as e:
        bot_logger.log_error(e, "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    finally:
        await on_shutdown()


if __name__ == "__main__":
    asyncio.run(main()) 