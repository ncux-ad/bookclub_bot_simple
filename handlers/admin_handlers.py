"""
@file: handlers/admin_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dependencies: aiogram, config, utils
@created: 2024-01-15
"""

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import config
from utils.data_manager import data_manager
from utils.logger import bot_logger
from keyboards.inline import create_admin_keyboard
from services.users import user_service
from services.books import book_service
from services.events import event_service

router = Router()


def admin_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞.
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã
        
    Returns:
        wrapper: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    """
    async def wrapper(message: Message, *args, **kwargs):
        if not config.is_admin(message.from_user.id):
            bot_logger.log_security_event("–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π_–¥–æ—Å—Ç—É–ø", message.from_user.id, "–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        return await func(message, *args, **kwargs)
    return wrapper


@router.message(Command("admin"))
@admin_required
async def cmd_admin(message: Message, **kwargs) -> None:
    """
    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    keyboard = create_admin_keyboard()
    await message.answer("üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                        reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—É–±–∞
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ/–∞–∫—Ç–∏–≤–Ω—ã—Ö)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ–≥–æ/–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö)
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    user_stats = user_service.get_user_stats()
    books = book_service.get_all_books()
    event_stats = event_service.get_event_stats()
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞:</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_stats['total']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active']})
üìà –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_today']}
üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(books)}
üìÖ –°–æ–±—ã—Ç–∏–π: {event_stats['total']} (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {event_stats['upcoming']})
    """
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_users")
async def admin_users(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    users = user_service.get_all_users()
    
    if not users:
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user_id, user_info in users.items():
            text += f"üÜî {user_id}\n"
            text += f"üìù {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_books")
async def admin_books(callback: CallbackQuery) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥")
    
    books = book_service.get_all_books()
    
    if not books:
        text = "üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìö <b>–ö–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:</b>\n\n"
        for title, info in books.items():
            text += f"üìñ {title}\n"
            if 'author' in info:
                text += f"üë§ {info['author']}\n"
            text += "\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_events")
async def admin_events(callback: CallbackQuery) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π")
    
    events = event_service.get_all_events()
    
    if not events:
        text = "üìÖ –°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event_id, event in events.items():
            text += f"üìñ {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            text += f"üìÖ {event.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"‚è∞ {event.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_back")
async def admin_back(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    keyboard = create_admin_keyboard()
    await callback.message.edit_text("üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                    reply_markup=keyboard, parse_mode="HTML")


@router.message(Command("settag"))
async def cmd_settag(message: Message) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –§–æ—Ä–º–∞—Ç: /settag <user_id> <tag>
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–≥: /settag <user_id> <tag>")
        return
    
    user_id = args[1]
    tag = args[2]
    
    if user_service.add_user_tag(user_id, tag):
        bot_logger.log_admin_action(message.from_user.id, f"—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–∞ '{tag}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await message.answer(f"‚úÖ –¢–µ–≥ '{tag}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}") 