"""
@file: handlers/admin_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dependencies: aiogram, config, utils
@created: 2024-01-15
"""

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta

from config import config
from utils.data_manager import data_manager
from utils.logger import bot_logger
from keyboards.inline import create_admin_keyboard
from services.users import user_service
from services.books import book_service
from services.events import event_service

router = Router()


def admin_required(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞.
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã
        
    Returns:
        wrapper: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
    """
    async def wrapper(message: Message, *args, **kwargs):
        if not config.is_admin(message.from_user.id):
            bot_logger.log_security_event("–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π_–¥–æ—Å—Ç—É–ø", message.from_user.id, "–∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        return await func(message, *args, **kwargs)
    return wrapper


@router.message(Command("admin"))
@admin_required
async def cmd_admin(message: Message, **kwargs) -> None:
    """
    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    keyboard = create_admin_keyboard()
    await message.answer("üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                        reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—É–±–∞
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Å–µ–≥–æ/–∞–∫—Ç–∏–≤–Ω—ã—Ö)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ–≥–æ/–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö)
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    user_stats = user_service.get_user_stats()
    books = book_service.get_all_books()
    event_stats = event_service.get_event_stats()
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞:</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_stats['total']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active']})
üìà –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_today']}
üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(books)}
üìÖ –°–æ–±—ã—Ç–∏–π: {event_stats['total']} (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {event_stats['upcoming']})
    """
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_users")
async def admin_users(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    users = user_service.get_all_users()
    
    if not users:
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user_id, user_info in users.items():
            text += f"üÜî {user_id}\n"
            text += f"üìù {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_books")
async def admin_books(callback: CallbackQuery) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥")
    
    books = book_service.get_all_books()
    
    if not books:
        text = "üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìö <b>–ö–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:</b>\n\n"
        for title, info in books.items():
            text += f"üìñ {title}\n"
            if 'author' in info:
                text += f"üë§ {info['author']}\n"
            text += "\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_events")
async def admin_events(callback: CallbackQuery) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    bot_logger.log_admin_action(callback.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π")
    
    events = event_service.get_all_events()
    
    if not events:
        text = "üìÖ –°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event_id, event in events.items():
            text += f"üìñ {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            text += f"üìÖ {event.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"‚è∞ {event.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "admin_back")
async def admin_back(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    keyboard = create_admin_keyboard()
    await callback.message.edit_text("üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                    reply_markup=keyboard, parse_mode="HTML")


@router.message(Command("settag"))
async def cmd_settag(message: Message) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –§–æ—Ä–º–∞—Ç: /settag <user_id> <tag>
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–≥: /settag <user_id> <tag>")
        return
    
    user_id = args[1]
    tag = args[2]
    
    if user_service.add_user_tag(user_id, tag):
        bot_logger.log_admin_action(message.from_user.id, f"—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–≥–∞ '{tag}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await message.answer(f"‚úÖ –¢–µ–≥ '{tag}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    user_stats = user_service.get_user_stats()
    books = book_service.get_all_books()
    event_stats = event_service.get_event_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users = user_service.get_all_users()
    active_users = len([u for u in users.values() if u.get('status') == 'active'])
    inactive_users = len([u for u in users.values() if u.get('status') == 'inactive'])
    banned_users = len([u for u in users.values() if u.get('status') == 'banned'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    today = datetime.now().date().isoformat()
    week_ago = (datetime.now() - timedelta(days=7)).date().isoformat()
    
    new_this_week = 0
    for user_data in users.values():
        first_interaction = user_data.get('first_interaction', '')
        if first_interaction.startswith(today) or (first_interaction >= week_ago and first_interaction <= today):
            new_this_week += 1
    
    stats_text = f"""
üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞:</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
   ‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total']}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}
   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}
   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_users}
   ‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats['new_today']}
   ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_this_week}

üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:</b>
   ‚Ä¢ –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(books)}

üìÖ <b>–°–æ–±—ã—Ç–∏—è:</b>
   ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {event_stats['total']}
   ‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: {event_stats['upcoming']}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö: {(active_users/user_stats['total']*100):.1f}% (–æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞)
    """
    
    bot_logger.log_admin_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    await message.answer(stats_text, parse_mode="HTML")


@router.message(Command("ban"))
async def cmd_ban(message: Message) -> None:
    """
    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –§–æ—Ä–º–∞—Ç: /ban <user_id>
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <user_id>")
        return
    
    user_id = args[1]
    
    if user_service.ban_user(user_id):
        bot_logger.log_admin_action(message.from_user.id, f"–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.message(Command("unban"))
async def cmd_unban(message: Message) -> None:
    """
    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –§–æ—Ä–º–∞—Ç: /unban <user_id>
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <user_id>")
        return
    
    user_id = args[1]
    
    if user_service.unban_user(user_id):
        bot_logger.log_admin_action(message.from_user.id, f"—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.message(Command("userinfo"))
async def cmd_userinfo(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –§–æ—Ä–º–∞—Ç: /userinfo <user_id>
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    if not config.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /userinfo <user_id>")
        return
    
    user_id = args[1]
    user_info = user_service.get_user(user_id)
    
    if not user_info:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = user_info.get('username', '')
    if username and not username.startswith('@'):
        username = f"@{username}"
    
    tags = user_info.get('tags', [])
    if isinstance(tags, str):
        tags = [tags]
    elif not isinstance(tags, list):
        tags = []
    
    tags_display = ", ".join(tags) if tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    info_text = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

üÜî ID: <code>{user_id}</code>
üîπ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìå Username: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è –¢–µ–≥–∏: {tags_display}
    """
    
    if user_info.get('activated_at'):
        info_text += f"\n‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_info.get('activated_at')}"
    
    bot_logger.log_admin_action(message.from_user.id, f"–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}")
    await message.answer(info_text, parse_mode="HTML", disable_web_page_preview=True) 


@router.message(Command("users"))
@admin_required
async def cmd_users(message: Message, **kwargs) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ:
    - –°—Ç–∞—Ç—É—Å—É (–≤—Å–µ, –∞–∫—Ç–∏–≤–Ω—ã–µ, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    - –¢–µ–≥–∞–º
    - –î–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    - –ü–æ–∏—Å–∫—É –ø–æ –∏–º–µ–Ω–∏/username
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = user_service.get_all_users()
    
    if not users:
        await message.answer("üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    keyboard = create_users_filter_keyboard()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total = len(users)
    active = len([u for u in users.values() if u.get('status') == 'active'])
    inactive = len([u for u in users.values() if u.get('status') == 'inactive'])
    banned = len([u for u in users.values() if u.get('status') == 'banned'])
    
    stats_text = f"""
üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned}

üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:</b>
    """
    
    await message.answer(stats_text, reply_markup=keyboard, parse_mode="HTML")


def create_users_filter_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ", callback_data="users_filter_all"),
            InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="users_filter_active")
        ],
        [
            InlineKeyboardButton(text="‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="users_filter_inactive"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="users_filter_banned")
        ],
        [
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data="users_filter_new"),
            InlineKeyboardButton(text="üè∑Ô∏è –° —Ç–µ–≥–∞–º–∏", callback_data="users_filter_tagged")
        ],
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="users_search"),
            InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç", callback_data="users_export")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ])
    return keyboard


@router.callback_query(lambda c: c.data.startswith("users_filter_"))
async def users_filter_handler(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback (CallbackQuery): Callback —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    filter_type = callback.data.split("_")[-1]
    users = user_service.get_all_users()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if filter_type == "all":
        filtered_users = users
        filter_name = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "active":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'active'}
        filter_name = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "inactive":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'inactive'}
        filter_name = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "banned":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'banned'}
        filter_name = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "new":
        week_ago = (datetime.now() - timedelta(days=7)).date().isoformat()
        filtered_users = {
            k: v for k, v in users.items() 
            if v.get('first_interaction', '').startswith(week_ago)
        }
        filter_name = "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ–¥–µ–ª—è)"
    elif filter_type == "tagged":
        filtered_users = {
            k: v for k, v in users.items() 
            if v.get('tags') and len(v.get('tags', [])) > 0
        }
        filter_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ–≥–∞–º–∏"
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä")
        return
    
    if not filtered_users:
        await callback.answer(f"üìù {filter_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    keyboard = create_users_list_keyboard(filtered_users, 0, filter_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = f"""
üë• <b>{filter_name}</b>

üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(filtered_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã <b>–°–ø–∏—Å–æ–∫:</b>
    """
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
    bot_logger.log_admin_action(callback.from_user.id, f"—Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {filter_type}")


def create_users_list_keyboard(users: dict, page: int = 0, filter_type: str = "all") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        users (dict): –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        filter_type (str): –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    users_list = list(users.items())
    users_per_page = 5
    total_pages = (len(users_list) + users_per_page - 1) // users_per_page
    
    start_idx = page * users_per_page
    end_idx = start_idx + users_per_page
    page_users = users_list[start_idx:end_idx]
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    for user_id, user_data in page_users:
        name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        username = user_data.get('username', '')
        status = user_data.get('status', 'unknown')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        status_emoji = {
            'active': '‚úÖ',
            'inactive': '‚è∏Ô∏è',
            'banned': 'üö´'
        }.get(status, '‚ùì')
        
        display_name = name[:20] + "..." if len(name) > 20 else name
        button_text = f"{status_emoji} {display_name}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"user_detail_{user_id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page_{filter_type}_{page-1}")
        )
    
    nav_buttons.append(
        InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="users_page_info")
    )
    
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page_{filter_type}_{page+1}")
        )
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="üîç –§–∏–ª—å—Ç—Ä—ã", callback_data="users_filters"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(lambda c: c.data.startswith("users_page_"))
async def users_page_handler(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback (CallbackQuery): Callback —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    if callback.data == "users_page_info":
        await callback.answer("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö")
        return
    
    parts = callback.data.split("_")
    filter_type = parts[2]
    page = int(parts[3])
    
    users = user_service.get_all_users()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—Ç –∂–µ —Ñ–∏–ª—å—Ç—Ä
    if filter_type == "all":
        filtered_users = users
        filter_name = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "active":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'active'}
        filter_name = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "inactive":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'inactive'}
        filter_name = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "banned":
        filtered_users = {k: v for k, v in users.items() if v.get('status') == 'banned'}
        filter_name = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    elif filter_type == "new":
        week_ago = (datetime.now() - timedelta(days=7)).date().isoformat()
        filtered_users = {
            k: v for k, v in users.items() 
            if v.get('first_interaction', '').startswith(week_ago)
        }
        filter_name = "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ–¥–µ–ª—è)"
    elif filter_type == "tagged":
        filtered_users = {
            k: v for k, v in users.items() 
            if v.get('tags') and len(v.get('tags', [])) > 0
        }
        filter_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ–≥–∞–º–∏"
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä")
        return
    
    keyboard = create_users_list_keyboard(filtered_users, page, filter_type)
    
    result_text = f"""
üë• <b>{filter_name}</b>

üìä <b>–ù–∞–π–¥–µ–Ω–æ:</b> {len(filtered_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üìã <b>–°–ø–∏—Å–æ–∫:</b>
    """
    
    await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith("user_detail_"))
async def user_detail_handler(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    Args:
        callback (CallbackQuery): Callback —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_id = callback.data.split("_")[-1]
    user_info = user_service.get_user(user_id)
    
    if not user_info:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    username = user_info.get('username', '')
    if username and not username.startswith('@'):
        username = f"@{username}"
    
    tags = user_info.get('tags', [])
    if isinstance(tags, str):
        tags = [tags]
    elif not isinstance(tags, list):
        tags = []
    
    tags_display = ", ".join(tags) if tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    status_emoji = {
        'active': '‚úÖ',
        'inactive': '‚è∏Ô∏è',
        'banned': 'üö´'
    }.get(user_info.get('status', 'unknown'), '‚ùì')
    
    detail_text = f"""
üë§ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

üÜî ID: <code>{user_id}</code>
üîπ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìå Username: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç –°—Ç–∞—Ç—É—Å: {status_emoji} {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è –¢–µ–≥–∏: {tags_display}
    """
    
    if user_info.get('activated_at'):
        detail_text += f"\n‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_info.get('activated_at')}"
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_ban_{user_id}"),
            InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unban_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"user_addtag_{user_id}"),
            InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=f"user_activity_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_filters")
        ]
    ])
    
    await callback.message.edit_text(detail_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    bot_logger.log_admin_action(callback.from_user.id, f"–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


@router.callback_query(lambda c: c.data.startswith("users_filters"))
async def users_filters_handler(callback: CallbackQuery) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback (CallbackQuery): Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    keyboard = create_users_filter_keyboard()
    
    users = user_service.get_all_users()
    total = len(users)
    active = len([u for u in users.values() if u.get('status') == 'active'])
    inactive = len([u for u in users.values() if u.get('status') == 'inactive'])
    banned = len([u for u in users.values() if u.get('status') == 'banned'])
    
    stats_text = f"""
üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}
‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned}

üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:</b>
    """
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith("users_search"))
async def users_search_handler(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback (CallbackQuery): Callback –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –ê–Ω–¥—Ä–µ–π\n"
        "‚Ä¢ @username\n"
        "‚Ä¢ ncux11\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="HTML"
    )
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback.answer("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.callback_query(lambda c: c.data.startswith("users_export"))
async def users_export_handler(callback: CallbackQuery) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback (CallbackQuery): Callback –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    users = user_service.get_all_users()
    
    if not users:
        await callback.answer("üìù –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV-–ø–æ–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    export_text = "ID,–ò–º—è,Username,–°—Ç–∞—Ç—É—Å,–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–¢–µ–≥–∏\n"
    
    for user_id, user_data in users.items():
        name = user_data.get('name', '')
        if name:
            name = name.replace(',', ';')
        
        username = user_data.get('username', '')
        if username:
            username = username.replace(',', ';')
        
        status = user_data.get('status', '')
        registered = user_data.get('registered_at', '')
        tags = ','.join(user_data.get('tags', [])).replace(',', ';')
        
        export_text += f"{user_id},{name},{username},{status},{registered},{tags}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
    await callback.message.answer_document(
        types.BufferedInputFile(
            export_text.encode('utf-8'),
            filename=f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        ),
        caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    bot_logger.log_admin_action(callback.from_user.id, "—ç–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω") 


@router.callback_query(lambda c: c.data.startswith("user_ban_"))
async def user_ban_handler(callback: CallbackQuery) -> None:
    """
    –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    Args:
        callback (CallbackQuery): Callback —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_id = callback.data.split("_")[-1]
    
    if user_service.ban_user(user_id):
        bot_logger.log_admin_action(callback.from_user.id, f"–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = user_service.get_user(user_id)
        if user_info:
            username = user_info.get('username', '')
            if username and not username.startswith('@'):
                username = f"@{username}"
            
            tags = user_info.get('tags', [])
            if isinstance(tags, str):
                tags = [tags]
            elif not isinstance(tags, list):
                tags = []
            
            tags_display = ", ".join(tags) if tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            
            detail_text = f"""
üë§ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

üÜî ID: <code>{user_id}</code>
üîπ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìå Username: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç –°—Ç–∞—Ç—É—Å: üö´ {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è –¢–µ–≥–∏: {tags_display}
            """
            
            if user_info.get('activated_at'):
                detail_text += f"\n‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_info.get('activated_at')}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_ban_{user_id}"),
                    InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unban_{user_id}")
                ],
                [
                    InlineKeyboardButton(text="üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"user_addtag_{user_id}"),
                    InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=f"user_activity_{user_id}")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_filters")
                ]
            ])
            
            await callback.message.edit_text(detail_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.callback_query(lambda c: c.data.startswith("user_unban_"))
async def user_unban_handler(callback: CallbackQuery) -> None:
    """
    –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    Args:
        callback (CallbackQuery): Callback —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_id = callback.data.split("_")[-1]
    
    if user_service.unban_user(user_id):
        bot_logger.log_admin_action(callback.from_user.id, f"—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = user_service.get_user(user_id)
        if user_info:
            username = user_info.get('username', '')
            if username and not username.startswith('@'):
                username = f"@{username}"
            
            tags = user_info.get('tags', [])
            if isinstance(tags, str):
                tags = [tags]
            elif not isinstance(tags, list):
                tags = []
            
            tags_display = ", ".join(tags) if tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            
            status_emoji = {
                'active': '‚úÖ',
                'inactive': '‚è∏Ô∏è',
                'banned': 'üö´'
            }.get(user_info.get('status', 'unknown'), '‚ùì')
            
            detail_text = f"""
üë§ <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>

üÜî ID: <code>{user_id}</code>
üîπ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìå Username: {username if username else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç –°—Ç–∞—Ç—É—Å: {status_emoji} {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è –¢–µ–≥–∏: {tags_display}
            """
            
            if user_info.get('activated_at'):
                detail_text += f"\n‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {user_info.get('activated_at')}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_ban_{user_id}"),
                    InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unban_{user_id}")
                ],
                [
                    InlineKeyboardButton(text="üè∑Ô∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥", callback_data=f"user_addtag_{user_id}"),
                    InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data=f"user_activity_{user_id}")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_filters")
                ]
            ])
            
            await callback.message.edit_text(detail_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.callback_query(lambda c: c.data.startswith("user_addtag_"))
async def user_addtag_handler(callback: CallbackQuery) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    
    Args:
        callback (CallbackQuery): Callback —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_id = callback.data.split("_")[-1]
    user_info = user_service.get_user(user_id)
    
    if not user_info:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–µ–≥–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
    current_tags = user_info.get('tags', [])
    if isinstance(current_tags, str):
        current_tags = [current_tags]
    elif not isinstance(current_tags, list):
        current_tags = []
    
    tags_display = ", ".join(current_tags) if current_tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    await callback.message.edit_text(
        f"üè∑Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üè∑Ô∏è –¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏: {tags_display}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
        f"‚Ä¢ VIP\n"
        f"‚Ä¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="HTML"
    )
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
    await callback.answer("üè∑Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


@router.callback_query(lambda c: c.data.startswith("user_activity_"))
async def user_activity_handler(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        callback (CallbackQuery): Callback —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    if not config.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    user_id = callback.data.split("_")[-1]
    user_info = user_service.get_user(user_id)
    
    if not user_info:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    registered_at = user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    activated_at = user_info.get('activated_at', '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
    first_interaction = user_info.get('first_interaction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Å–∏—Å—Ç–µ–º–µ
    days_in_system = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if first_interaction:
        try:
            from datetime import datetime
            first_date = datetime.fromisoformat(first_interaction.replace('Z', '+00:00'))
            now = datetime.now()
            delta = now - first_date
            days_in_system = f"{delta.days} –¥–Ω–µ–π"
        except:
            days_in_system = "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    activity_text = f"""
üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üÜî ID: <code>{user_id}</code>

üìÖ <b>–î–∞—Ç—ã:</b>
‚Ä¢ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {first_interaction}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registered_at}
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {activated_at}
‚Ä¢ –í —Å–∏—Å—Ç–µ–º–µ: {days_in_system}

üìç <b>–°—Ç–∞—Ç—É—Å:</b> {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üè∑Ô∏è <b>–¢–µ–≥–∏:</b> {', '.join(user_info.get('tags', [])) if user_info.get('tags') else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
    """
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º", callback_data=f"user_detail_{user_id}")
        ]
    ])
    
    await callback.message.edit_text(activity_text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    bot_logger.log_admin_action(callback.from_user.id, f"–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}") 