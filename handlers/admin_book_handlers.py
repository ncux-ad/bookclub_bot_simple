"""
@file: handlers/admin_book_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–Ω–∏–≥–∏
@dependencies: aiogram, config, utils, services
@created: 2025-01-04
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from pathlib import Path
import json

from config import config
from utils.logger import bot_logger
from utils.access_control import admin_required
from services.books import book_service
from utils.states import BookLinkStates
from utils.data_manager import data_manager
import base64

router = Router()


import hashlib

def safe_encode_title(title: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_data
    
    Args:
        title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        
    Returns:
        str: –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ callback_data
    return hashlib.md5(title.encode('utf-8')).hexdigest()[:16]


def safe_decode_title(encoded_title: str) -> str:
    """
    –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ callback_data
    
    Args:
        encoded_title (str): –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
    Returns:
        str: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    # –î–ª—è —Ö–µ—à–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —Ö–µ—à—É
    books = book_service.get_all_books()
    for title in books.keys():
        if safe_encode_title(title) == encoded_title:
            return title
    return encoded_title


@router.message(Command("editlinks"))
@admin_required
async def cmd_editlinks(message: Message) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–Ω–∏–≥–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–Ω–∏–≥–∏")
    
    books = book_service.get_all_books()
    
    if not books:
        await message.answer(
            "üìö <b>–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for title, info in books.items():
        safe_title = safe_encode_title(title)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {title[:30]}{'...' if len(title) > 30 else ''}",
                callback_data=f"editlinks_{safe_title}"
            )
        ])
    
    await message.answer(
        "üîó <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–Ω–∏–≥–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {len(books)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("editlinks_"))
async def show_book_links(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        callback (CallbackQuery): Callback —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∏
        
    Returns:
        None
    """
    encoded_title = callback.data.replace("editlinks_", "")
    book_title = safe_decode_title(encoded_title)
    books = book_service.get_all_books()
    
    if book_title not in books:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    book_info = books[book_title]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö
    links_text = f"üîó <b>–°—Å—ã–ª–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏: {book_title}</b>\n\n"
    
    yandex_url = book_info.get('yandex_books_url', '')
    litres_url = book_info.get('litres_url', '')
    audio_format = book_info.get('audio_format', '')
    
    links_text += f"üìö <b>–Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏:</b> {yandex_url if yandex_url else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
    links_text += f"üìñ <b>–õ–∏—Ç–†–µ—Å:</b> {litres_url if litres_url else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
    links_text += f"üéß <b>–ê—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç:</b> {audio_format if audio_format else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    safe_title = safe_encode_title(book_title)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏", callback_data=f"link_yandex_{safe_title}")],
        [InlineKeyboardButton(text="üìñ –õ–∏—Ç–†–µ—Å", callback_data=f"link_litres_{safe_title}")],
        [InlineKeyboardButton(text="üéß –ê—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç", callback_data=f"link_audio_{safe_title}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_editlinks")]
    ])
    
    await callback.message.edit_text(
        links_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("link_yandex_"))
async def edit_yandex_link(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏
    
    Args:
        callback (CallbackQuery): Callback
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    encoded_title = callback.data.replace("link_yandex_", "")
    book_title = safe_decode_title(encoded_title)
    
    await state.set_state(BookLinkStates.waiting_for_yandex_url)
    await state.update_data(book_title=book_title)
    
    await callback.message.edit_text(
        f"üìö <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏</b>\n\n"
        f"–ö–Ω–∏–≥–∞: {book_title}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("link_litres_"))
async def edit_litres_link(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –õ–∏—Ç–†–µ—Å
    
    Args:
        callback (CallbackQuery): Callback
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    encoded_title = callback.data.replace("link_litres_", "")
    book_title = safe_decode_title(encoded_title)
    
    await state.set_state(BookLinkStates.waiting_for_litres_url)
    await state.update_data(book_title=book_title)
    
    await callback.message.edit_text(
        f"üìñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –õ–∏—Ç–†–µ—Å</b>\n\n"
        f"–ö–Ω–∏–≥–∞: {book_title}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –õ–∏—Ç–†–µ—Å –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("link_audio_"))
async def edit_audio_format(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç
    
    Args:
        callback (CallbackQuery): Callback
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    encoded_title = callback.data.replace("link_audio_", "")
    book_title = safe_decode_title(encoded_title)
    
    await state.set_state(BookLinkStates.waiting_for_audio_format)
    await state.update_data(book_title=book_title)
    
    await callback.message.edit_text(
        f"üéß <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–∞</b>\n\n"
        f"–ö–Ω–∏–≥–∞: {book_title}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        parse_mode="HTML"
    )


@router.message(StateFilter(BookLinkStates.waiting_for_yandex_url))
async def process_yandex_url(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    data = await state.get_data()
    book_title = data.get('book_title')
    
    url = message.text.strip()
    if url.lower() == '–Ω–µ—Ç':
        url = ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    books = book_service.get_all_books()
    if book_title in books:
        books[book_title]['yandex_books_url'] = url
        data_manager.save_json(config.database.books_file, books)
        
        await message.answer(
            f"‚úÖ <b>–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ö–Ω–∏–≥–∞: {book_title}\n"
            f"–Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏: {url if url else '–£–¥–∞–ª–µ–Ω–∞'}",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    await state.clear()


@router.message(StateFilter(BookLinkStates.waiting_for_litres_url))
async def process_litres_url(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –õ–∏—Ç–†–µ—Å
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    data = await state.get_data()
    book_title = data.get('book_title')
    
    url = message.text.strip()
    if url.lower() == '–Ω–µ—Ç':
        url = ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    books = book_service.get_all_books()
    if book_title in books:
        books[book_title]['litres_url'] = url
        data_manager.save_json(config.database.books_file, books)
        
        await message.answer(
            f"‚úÖ <b>–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ö–Ω–∏–≥–∞: {book_title}\n"
            f"–õ–∏—Ç–†–µ—Å: {url if url else '–£–¥–∞–ª–µ–Ω–∞'}",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    await state.clear()


@router.message(StateFilter(BookLinkStates.waiting_for_audio_format))
async def process_audio_format(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–º
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        
    Returns:
        None
    """
    data = await state.get_data()
    book_title = data.get('book_title')
    
    audio_info = message.text.strip()
    if audio_info.lower() == '–Ω–µ—Ç':
        audio_info = ""
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    books = book_service.get_all_books()
    if book_title in books:
        books[book_title]['audio_format'] = audio_info
        data_manager.save_json(config.database.books_file, books)
        
        await message.answer(
            f"‚úÖ <b>–ê—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ö–Ω–∏–≥–∞: {book_title}\n"
            f"–ê—É–¥–∏–æ: {audio_info if audio_info else '–£–¥–∞–ª–µ–Ω'}",
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    await state.clear()


@router.callback_query(lambda c: c.data == "back_to_editlinks")
async def back_to_editlinks(callback: CallbackQuery) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
    
    Args:
        callback (CallbackQuery): Callback
        
    Returns:
        None
    """
    books = book_service.get_all_books()
    
    if not books:
        await callback.message.edit_text(
            "üìö <b>–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for title, info in books.items():
        safe_title = safe_encode_title(title)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {title[:30]}{'...' if len(title) > 30 else ''}",
                callback_data=f"editlinks_{safe_title}"
            )
        ])
    
    await callback.message.edit_text(
        "üîó <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–Ω–∏–≥–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {len(books)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫:",
        reply_markup=keyboard,
        parse_mode="HTML"
    ) 