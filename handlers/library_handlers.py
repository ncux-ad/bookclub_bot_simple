"""
@file: handlers/library_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –∫–Ω–∏–≥
@dependencies: aiogram, config, utils, services
@created: 2025-01-04
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from datetime import datetime
from pathlib import Path
import json

from config import config
from utils.logger import bot_logger
from utils.access_control import active_user_required, admin_required
from utils.callback_utils import safe_encode_title, safe_decode_title, CallbackPrefixes
from services.books import book_service
from services.users import user_service
from utils.data_manager import data_manager
import base64

router = Router()


@router.message(Command("library"))
@active_user_required
async def cmd_library(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–Ω–∏–≥
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    bot_logger.log_user_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    books = book_service.get_all_books()
    
    if not books:
        await message.answer(
            "üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞</b>\n\n"
            "–ö–Ω–∏–≥–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for title, info in books.items():
        author = info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        safe_title = safe_encode_title(title)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {title[:30]}{'...' if len(title) > 30 else ''}",
                callback_data=f"book_{safe_title}"
            )
        ])
    
    await message.answer(
        f"üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–Ω–∏–≥</b>\n\n"
        f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {len(books)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("book_"))
async def show_book_card(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏
    
    Args:
        callback (CallbackQuery): Callback —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∏
        
    Returns:
        None
    """
    encoded_title = callback.data.replace("book_", "")
    book_title = safe_decode_title(encoded_title)
    books = book_service.get_all_books()
    
    if book_title not in books:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    book_info = books[book_title]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–Ω–∏–≥–∏
    card_text = f"üìñ <b>{book_title}</b>\n\n"
    
    if 'author' in book_info:
        card_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {book_info['author']}\n"
    
    if 'description' in book_info:
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        desc = book_info['description']
        if len(desc) > 300:
            desc = desc[:300] + "..."
        card_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
    
    if 'year' in book_info:
        card_text += f"üìÖ <b>–ì–æ–¥:</b> {book_info['year']}\n"
    
    if 'genres' in book_info and book_info['genres']:
        genres = ", ".join(book_info['genres'])
        card_text += f"üè∑Ô∏è <b>–ñ–∞–Ω—Ä—ã:</b> {genres}\n"
    
    if 'added_at' in book_info:
        added_date = book_info['added_at'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        card_text += f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∞:</b> {added_date}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–Ω–ª–∞–π–Ω –∫–∞—Ç–∞–ª–æ–≥–∏
    if 'yandex_books_url' in book_info and book_info['yandex_books_url']:
        card_text += f"üìö <b>–Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏:</b> {book_info['yandex_books_url']}\n"
    
    if 'litres_url' in book_info and book_info['litres_url']:
        card_text += f"üìñ <b>–õ–∏—Ç–†–µ—Å:</b> {book_info['litres_url']}\n"
    
    if 'audio_format' in book_info and book_info['audio_format']:
        card_text += f"üéß <b>–ê—É–¥–∏–æ:</b> {book_info['audio_format']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    available_formats = []
    
    if 'fb2_file' in book_info and book_info['fb2_file']:
        available_formats.append(('FB2', 'fb2'))
    if 'epub_file' in book_info and book_info['epub_file']:
        available_formats.append(('EPUB', 'epub'))
    if 'mobi_file' in book_info and book_info['mobi_file']:
        available_formats.append(('MOBI', 'mobi'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if available_formats:
        safe_title = safe_encode_title(book_title)
        for format_name, format_type in available_formats:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üì• –°–∫–∞—á–∞—Ç—å {format_name}",
                    callback_data=f"download_{safe_title}_{format_type}"
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ", callback_data="back_to_library")
    ])
    
    await callback.message.edit_text(
        card_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data.startswith("download_"))
async def download_book(callback: CallbackQuery) -> None:
    """
    –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        callback (CallbackQuery): Callback —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        None
    """
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞!")
        return
    
    encoded_title = parts[1]
    book_title = safe_decode_title(encoded_title)
    format_type = parts[2]
    
    books = book_service.get_all_books()
    
    if book_title not in books:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    book_info = books[book_title]
    file_key = f"{format_type}_file"
    
    if file_key not in book_info or not book_info[file_key]:
        await callback.answer(f"‚ùå –§–∞–π–ª {format_type.upper()} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    file_path = book_info[file_key]
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not Path(file_path).exists():
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.bot.send_document(
            chat_id=callback.from_user.id,
            document=FSInputFile(file_path),
            caption=f"üìö {book_title} ({format_type.upper()})"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        bot_logger.log_error(e, f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {file_path}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!")


@router.callback_query(lambda c: c.data == "back_to_library")
async def back_to_library(callback: CallbackQuery) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥
    
    Args:
        callback (CallbackQuery): Callback
        
    Returns:
        None
    """
    books = book_service.get_all_books()
    
    if not books:
        await callback.message.edit_text(
            "üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞</b>\n\n"
            "–ö–Ω–∏–≥–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for title, info in books.items():
        author = info.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        safe_title = safe_encode_title(title)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {title[:30]}{'...' if len(title) > 30 else ''}",
                callback_data=f"book_{safe_title}"
            )
        ])
    
    await callback.message.edit_text(
        f"üìö <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–Ω–∏–≥</b>\n\n"
        f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {len(books)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(Command("search"))
@active_user_required
async def cmd_search(message: Message) -> None:
    """
    –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    bot_logger.log_user_action(message.from_user.id, "–ø–æ–∏—Å–∫ –∫–Ω–∏–≥")
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –∫–Ω–∏–≥</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /library –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥.",
        parse_mode="HTML"
    )


@router.message(lambda message: message.text and not message.text.startswith('/'))
@active_user_required
async def search_books(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        
    Returns:
        None
    """
    query = message.text.lower().strip()
    
    if len(query) < 2:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    books = book_service.get_all_books()
    found_books = []
    
    for title, info in books.items():
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if query in title.lower():
            found_books.append((title, info))
            continue
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
        if 'author' in info and query in info['author'].lower():
            found_books.append((title, info))
            continue
        
        # –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if 'description' in info and query in info['description'].lower():
            found_books.append((title, info))
            continue
    
    if not found_books:
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫: {message.text}</b>\n\n"
            f"–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for title, info in found_books:
        safe_title = safe_encode_title(title)
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìñ {title[:30]}{'...' if len(title) > 30 else ''}",
                callback_data=f"book_{safe_title}"
            )
        ])
    
    await message.answer(
        f"üîç <b>–ü–æ–∏—Å–∫: {message.text}</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: {len(found_books)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    ) 