"""
@file: handlers/user_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dependencies: aiogram, config, utils
@created: 2024-01-15
"""

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime

from config import config
from utils.data_manager import data_manager
from utils.security import security_manager
from utils.logger import bot_logger
from keyboards.inline import create_books_keyboard, create_book_keyboard, create_back_keyboard
from services.users import user_service
from services.books import book_service
from services.events import event_service
from utils.states import RegistrationStates, BookSearchStates

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """
    –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞
    
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    user_info = user_service.get_user(user_id)
    
    bot_logger.log_user_action(message.from_user.id, "–∫–æ–º–∞–Ω–¥–∞ /start")
    
    if not user_info:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º inactive
        if user_service.create_user(
            user_id=user_id,
            name=message.from_user.first_name,
            username=message.from_user.username,
            status="inactive"
        ):
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±!\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        status = user_info.get('status', 'unknown')
        if status == 'active':
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            )
        else:
            await message.answer(
                "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register"
            )


@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    
    bot_logger.log_user_action(message.from_user.id, "–Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_service.get_user(user_id)
    if user_info and user_info.get('status') == 'active':
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    if not security_manager.check_login_attempts(message.from_user.id):
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await message.answer("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ñ—Ä–∞–∑–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª—É–±–∞")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã
    await state.set_state(RegistrationStates.waiting_for_phrase)


@router.message(StateFilter(RegistrationStates.waiting_for_phrase))
async def process_registration_phrase(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    secret_phrase = message.text.strip()
    
    bot_logger.log_user_action(message.from_user.id, "–≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if not security_manager.verify_secret_phrase(secret_phrase, config.security.secret_phrase):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        security_manager.record_login_attempt(message.from_user.id, False)
        bot_logger.log_security_event("–Ω–µ–≤–µ—Ä–Ω–∞—è_—Ñ—Ä–∞–∑–∞", message.from_user.id)
        return
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    if user_service.activate_user(user_id):
        security_manager.record_login_attempt(message.from_user.id, True)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–º–µ–Ω—ã
        
    Returns:
        None
    """
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


@router.message(Command("books"))
async def cmd_books(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –∫–Ω–∏–≥–∞–º–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    user_info = user_service.get_user(user_id)
    
    if not user_info or user_info.get('status') != 'active':
        await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    books = book_service.get_all_books()
    
    bot_logger.log_user_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
    
    if not books:
        await message.answer("üìö –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
        return
    
    keyboard = create_books_keyboard(books)
    await message.answer("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=keyboard)


@router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–∏—Å–∫–∞
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    user_info = user_service.get_user(user_id)
    
    if not user_info or user_info.get('status') != 'active':
        await message.answer("‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    bot_logger.log_user_action(message.from_user.id, "–Ω–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥")
    
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await message.answer("üí° –ü—Ä–∏–º–µ—Ä—ã: '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', '–¢–æ–ª—Å—Ç–æ–π', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    await state.set_state(BookSearchStates.waiting_for_query)


@router.message(StateFilter(BookSearchStates.waiting_for_query))
async def process_search_query(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        
    Returns:
        None
    """
    query = message.text.strip().lower()
    
    bot_logger.log_user_action(message.from_user.id, f"–ø–æ–∏—Å–∫ –∫–Ω–∏–≥: {query}")
    
    books = book_service.get_all_books()
    found_books = {}
    
    # –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    for title, book_info in books.items():
        title_lower = title.lower()
        author_lower = book_info.get('author', '').lower()
        description_lower = book_info.get('description', '').lower()
        
        if (query in title_lower or 
            query in author_lower or 
            query in description_lower):
            found_books[title] = book_info
    
    if found_books:
        keyboard = create_books_keyboard(found_books)
        await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_books)} –∫–Ω–∏–≥:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(lambda c: c.data.startswith('book:'))
async def process_book_selection(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ,
    –≤–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
    Returns:
        None
    """
    book_title = callback.data.split(':', 1)[1]
    book_info = book_service.get_book(book_title)
    
    bot_logger.log_user_action(callback.from_user.id, f"–≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏: {book_title}")
    
    if not book_info:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    text = f"üìñ <b>{book_title}</b>\n\n"
    if 'author' in book_info:
        text += f"üë§ –ê–≤—Ç–æ—Ä: {book_info['author']}\n"
    if 'description' in book_info:
        text += f"üìù {book_info['description']}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = []
    for fmt in ['epub', 'fb2', 'mobi']:
        if f'{fmt}_file' in book_info:
            formats.append(fmt.upper())
    
    if formats:
        text += f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
        
        keyboard = create_book_keyboard(book_title, formats)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.answer("–§–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")


@router.callback_query(lambda c: c.data.startswith('download:'))
async def process_download(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—É—Ç–∏ —Ñ–∞–π–ª–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Args:
        callback (CallbackQuery): Callback —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–Ω–∏–≥–µ –∏ —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        None
    """
    _, book_title, format_type = callback.data.split(':', 2)
    book_info = book_service.get_book(book_title)
    
    bot_logger.log_user_action(callback.from_user.id, f"—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {book_title} ({format_type})")
    
    if not book_info:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    file_key = f'{format_type}_file'
    
    if file_key in book_info:
        try:
            file_path = book_info[file_key]
            if file_path and file_path.startswith('books/'):
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ —Ñ–∞–π–ª–∞
                sanitized_path = security_manager.sanitize_filename(file_path)
                
                await callback.bot.send_document(
                    chat_id=callback.from_user.id,
                    document=types.FSInputFile(sanitized_path),
                    caption=f"üìö {book_title} ({format_type.upper()})"
                )
                await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                bot_logger.log_file_operation("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", sanitized_path, True)
            else:
                await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                bot_logger.log_file_operation("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ", file_path, False)
        except Exception as e:
            bot_logger.log_error(e, f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!")
    else:
        await callback.answer("–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")


@router.callback_query(lambda c: c.data == "back_to_books")
async def back_to_books(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –∫–Ω–∏–≥.
    
    Args:
        callback (CallbackQuery): Callback —Å –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        
    Returns:
        None
    """
    books = book_service.get_all_books()
    
    bot_logger.log_user_action(callback.from_user.id, "–≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥")
    
    keyboard = create_books_keyboard(books)
    await callback.message.edit_text("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=keyboard)


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    –í–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–º–æ—â–∏
        
    Returns:
        None
    """
    help_text = """
üìö <b>–ö–æ–º–∞–Ω–¥—ã –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/register - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∫–ª—É–±–µ (–ø–æ—à–∞–≥–æ–≤–æ)
/search - –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É
/books - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/settag &lt;user_id&gt; &lt;tag&gt; - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/ban &lt;user_id&gt; - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban &lt;user_id&gt; - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/userinfo &lt;user_id&gt; - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/stats - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    
    bot_logger.log_user_action(message.from_user.id, "–∑–∞–ø—Ä–æ—Å —Å–ø—Ä–∞–≤–∫–∏")
    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("schedule"))
async def cmd_schedule(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞.
    –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    user_info = user_service.get_user(user_id)
    
    if not user_info or user_info.get('status') != 'active':
        await message.answer("‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    events = event_service.get_upcoming_events()
    
    bot_logger.log_user_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    if not events:
        await message.answer("üìÖ –í—Å—Ç—Ä–µ—á–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    text = "üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n"
    
    for event_id, event in events.items():
        text += f"üìñ <b>{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        text += f"üìÖ –î–∞—Ç–∞: {event.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {event.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        if event.get('description'):
            text += f"üìù {event['description']}\n"
        text += "\n"
    
    await message.answer(text, parse_mode="HTML")


@router.message(Command("profile"))
async def cmd_profile(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
    - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–ø–∏—Ä—É–µ–º—ã–π)
    - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - Username (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
    - –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    - –°—Ç–∞—Ç—É—Å –≤ –∫–ª—É–±–µ
    - –¢–µ–≥–∏/—Ä–æ–ª–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ—Ñ–∏–ª—è
        
    Returns:
        None
    """
    user_id = str(message.from_user.id)
    user_info = user_service.get_user(user_id)
    
    bot_logger.log_user_action(message.from_user.id, "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")
    
    if not user_info:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    status = user_info.get('status', 'unknown')
    if status != 'active':
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –∫–ª—É–±–µ!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = user_info.get('username', '')
    if username and not username.startswith('@'):
        username = f"@{username}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π username
    username_display = username if username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    if username and username != "–ù–µ —É–∫–∞–∑–∞–Ω":
        username_display = f"<a href='https://t.me/{username[1:]}'>{username}</a>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä—É–µ–º—ã–π ID
    user_id_display = f"<code>{user_id}</code>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    tags = user_info.get('tags', [])
    if isinstance(tags, str):
        tags = [tags]
    elif not isinstance(tags, list):
        tags = []
    
    tags_display = ", ".join(tags) if tags else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üÜî ID: {user_id_display}
üîπ –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìå Username: {username_display}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìç –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè∑Ô∏è –¢–µ–≥–∏: {tags_display}
    """
    
    await message.answer(profile_text, parse_mode="HTML", disable_web_page_preview=True) 