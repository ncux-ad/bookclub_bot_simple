"""
@file: handlers/book_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–∏–≥–∞–º–∏
@dependencies: aiogram, services.books, utils.states, utils.access_control, utils.logger
@created: 2025-01-03
"""

import os
import tempfile
from pathlib import Path
from typing import Any

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.books import book_service
from utils.states import BookAddStates
from utils.access_control import admin_required
from utils.logger import bot_logger
from keyboards.inline import create_book_confirmation_keyboard, create_skip_keyboard

router = Router()


@router.message(Command("addbook"))
@admin_required
async def cmd_addbook(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ —Å FB2 —Ñ–∞–π–ª–æ–º
    """
    bot_logger.log_user_action(message.from_user.id, "–Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏")
    
    await state.set_state(BookAddStates.waiting_for_book_file)
    
    await message.answer(
        "üìö <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å FB2 —Ñ–∞–π–ª–æ–º –∫–Ω–∏–≥–∏.\n\n"
        "üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ ZIP –∞—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å FB2 —Ñ–∞–π–ª\n"
        "‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º FB2 —Ñ–æ—Ä–º–∞—Ç–æ–º\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –Ω–µ –±–æ–ª–µ–µ 50 –ú–ë\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç ZIP –∞—Ä—Ö–∏–≤–∞, "
        "–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å FB2 —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é.",
        parse_mode="HTML"
    )


@router.message(BookAddStates.waiting_for_book_file, F.document)
async def process_book_file(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_name = message.document.file_name.lower()
        
        if not (file_name.endswith('.zip') or file_name.endswith('.fb2')):
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ –∏–ª–∏ FB2 —Ñ–∞–π–ª."
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await message.bot.get_file(message.document.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.NamedTemporaryFile(delete=False, suffix=Path(file_name).suffix) as tmp_file:
            tmp_file.write(downloaded_file.read())
            temp_path = tmp_file.name
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            if file_name.endswith('.zip'):
                book_data = book_service.process_zip_archive(temp_path, str(message.from_user.id))
            else:  # .fb2
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É FB2 —Ñ–∞–π–ª–æ–≤
                await message.answer("‚ùå –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ FB2 —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ZIP –∞—Ä—Ö–∏–≤.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            await state.update_data(book_data=book_data, temp_file_path=temp_path)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title = book_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            author = book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
            description = book_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            
            await message.answer(
                f"üìñ <b>–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞:</b>\n\n"
                f"üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description[:200]}{'...' if len(description) > 200 else ''}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ?",
                parse_mode="HTML",
                reply_markup=create_book_confirmation_keyboard()
            )
            
            await state.set_state(BookAddStates.waiting_for_confirmation)
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                
    except Exception as e:
        bot_logger.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()


@router.message(BookAddStates.waiting_for_book_file)
async def process_invalid_file(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ –∏–ª–∏ FB2 —Ñ–∞–π–ª."
    )


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "edit_title")
async def edit_book_title(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    await state.set_state(BookAddStates.waiting_for_book_title)
    
    await callback.message.edit_text(
        "üìö <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b>",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "edit_author")
async def edit_book_author(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    await state.set_state(BookAddStates.waiting_for_book_author)
    
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:</b>",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "edit_description")
async def edit_book_description(callback: CallbackQuery, state: FSMContext) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    await state.set_state(BookAddStates.waiting_for_book_description)
    
    await callback.message.edit_text(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b>\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "add_yandex")
async def add_yandex_link(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏"""
    await state.set_state(BookAddStates.waiting_for_yandex_link)
    
    await callback.message.edit_text(
        "üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://market.yandex.ru/product/...",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "add_litres")
async def add_litres_link(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–∏—Ç–†–µ—Å"""
    await state.set_state(BookAddStates.waiting_for_litres_link)
    
    await callback.message.edit_text(
        "üîó <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –õ–∏—Ç–†–µ—Å:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://www.litres.ru/...",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "add_audio")
async def add_audio_link(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É"""
    await state.set_state(BookAddStates.waiting_for_audio_link)
    
    await callback.message.edit_text(
        "üéß <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: https://www.litres.ru/audio/...",
        parse_mode="HTML",
        reply_markup=create_skip_keyboard()
    )
    await callback.answer()


@router.callback_query(BookAddStates.waiting_for_confirmation, F.data == "confirm_add")
async def confirm_add_book(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    data = await state.get_data()
    book_data = data.get('book_data', {})
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É
        book_id = book_service.add_book(book_data)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book_data.get('title')}\n"
            f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {book_data.get('author')}\n"
            f"üÜî <b>ID:</b> <code>{book_id}</code>\n\n"
            f"–ö–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.",
            parse_mode="HTML"
        )
        
        bot_logger.log_user_action(callback.from_user.id, f"–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book_data.get('title')}")
        
    except Exception as e:
        bot_logger.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@router.message(BookAddStates.waiting_for_book_title)
async def process_book_title(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        book_data['title'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {message.text}")
    
    await show_book_preview(message, state)


@router.message(BookAddStates.waiting_for_book_author)
async def process_book_author(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–ê–≤—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        book_data['author'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer(f"‚úÖ –ê–≤—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {message.text}")
    
    await show_book_preview(message, state)


@router.message(BookAddStates.waiting_for_book_description)
async def process_book_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        book_data['description'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    
    await show_book_preview(message, state)


@router.message(BookAddStates.waiting_for_yandex_link)
async def process_yandex_link(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        if 'links' not in book_data:
            book_data['links'] = {}
        book_data['links']['yandex'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    
    await show_book_preview(message, state)


@router.message(BookAddStates.waiting_for_litres_link)
async def process_litres_link(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –õ–∏—Ç–†–µ—Å"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –õ–∏—Ç–†–µ—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        if 'links' not in book_data:
            book_data['links'] = {}
        book_data['links']['litres'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –õ–∏—Ç–†–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    
    await show_book_preview(message, state)


@router.message(BookAddStates.waiting_for_audio_link)
async def process_audio_link(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        data = await state.get_data()
        book_data = data.get('book_data', {})
        if 'links' not in book_data:
            book_data['links'] = {}
        book_data['links']['audio'] = message.text
        await state.update_data(book_data=book_data)
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    
    await show_book_preview(message, state)


async def show_book_preview(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥–∏"""
    data = await state.get_data()
    book_data = data.get('book_data', {})
    
    title = book_data.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    author = book_data.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
    description = book_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    links = book_data.get('links', {})
    
    preview_text = (
        f"üìñ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n"
        f"üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description[:200]}{'...' if len(description) > 200 else ''}\n\n"
    )
    
    if links.get('yandex'):
        preview_text += f"üîó <b>–Ø–Ω–¥–µ–∫—Å.–ö–Ω–∏–≥–∏:</b> {links['yandex']}\n"
    if links.get('litres'):
        preview_text += f"üîó <b>–õ–∏—Ç–†–µ—Å:</b> {links['litres']}\n"
    if links.get('audio'):
        preview_text += f"üéß <b>–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞:</b> {links['audio']}\n"
    
    preview_text += "\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ?"
    
    await message.answer(
        preview_text,
        parse_mode="HTML",
        reply_markup=create_book_confirmation_keyboard()
    )
    
    await state.set_state(BookAddStates.waiting_for_confirmation)


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.") 