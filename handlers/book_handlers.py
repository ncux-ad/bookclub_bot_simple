"""
@file: handlers/book_handlers.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏ —á–µ—Ä–µ–∑ FSM
@dependencies: aiogram, config, utils, services
@created: 2025-01-04
"""

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
from pathlib import Path

from config import config
from utils.logger import bot_logger
from utils.access_control import admin_required
from services.books import book_service
from utils.states import BookManagementStates
from utils.fb2_parser import fb2_parser
from utils.book_converter import book_converter
from utils.telegram_uploader import telegram_uploader

router = Router()


@router.message(Command("addbook"))
@admin_required
async def cmd_addbook(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:
    1. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
    2. –ê–≤—Ç–æ—Ä
    3. –û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    4. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏")
    
    await state.set_state(BookManagementStates.waiting_for_book_title)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    await message.answer(
        "üìö <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "üí° <b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –í–æ–π–Ω–∞ –∏ –º–∏—Ä\n"
        "‚Ä¢ –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ\n"
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(Command("uploadbook"))
@admin_required
async def cmd_uploadbook(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏ –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å FB2 —Ñ–∞–π–ª–æ–º:
    1. –ò–∑–≤–ª–µ–∫–∞–µ—Ç FB2 —Ñ–∞–π–ª
    2. –ü–∞—Ä—Å–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ EPUB –∏ MOBI
    4. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ Telegram
    5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏ –∏–∑ ZIP")
    
    await state.set_state(BookManagementStates.waiting_for_zip_file)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    await message.answer(
        "üìö <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏ –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞</b>\n\n"
        "üí° <b>–®–∞–≥ 1:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å FB2 —Ñ–∞–π–ª–æ–º\n\n"
        "üìù <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ ZIP-–∞—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å FB2 —Ñ–∞–π–ª\n"
        "‚Ä¢ FB2 —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ –Ω–µ –±–æ–ª–µ–µ 50MB\n\n"
        "üîÑ <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ FB2 —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ, –≥–æ–¥, –∂–∞–Ω—Ä)\n"
        "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ EPUB –∏ MOBI\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Telegram –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(StateFilter(BookManagementStates.waiting_for_book_title))
async def process_book_title(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    title = message.text.strip()
    
    if len(title) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    if len(title) > 200:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
    existing_book = book_service.get_book(title)
    if existing_book:
        await message.answer(
            f"‚ùå –ö–Ω–∏–≥–∞ <b>¬´{title}¬ª</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(book_title=title)
    await state.set_state(BookManagementStates.waiting_for_author)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n\n"
        "üí° <b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π\n"
        "‚Ä¢ –§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π\n"
        "‚Ä¢ –ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(StateFilter(BookManagementStates.waiting_for_author))
async def process_book_author(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Ä–æ–º –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    author = message.text.strip()
    
    if len(author) < 2:
        await message.answer(
            "‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!\n"
            "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    if len(author) > 100:
        await message.answer(
            "‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.update_data(book_author=author)
    await state.set_state(BookManagementStates.waiting_for_description)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    data = await state.get_data()
    title = data.get('book_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"‚úÖ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n\n"
        "üí° <b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ —Ä—É—Å—Å–∫–æ–º –æ–±—â–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–∏\n"
        "‚Ä¢ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º –≤ —Å–æ–≤–µ—Ç—Å–∫–æ–π –ú–æ—Å–∫–≤–µ",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(StateFilter(BookManagementStates.waiting_for_description))
async def process_book_description(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    description = message.text.strip()
    
    if len(description) > 1000:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
            "–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —à–∞–≥—É
    await state.update_data(book_description=description)
    await state.set_state(BookManagementStates.waiting_for_file_path)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_file")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    data = await state.get_data()
    title = data.get('book_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    author = data.get('book_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    await message.answer(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"‚úÖ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
        f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}{'...' if len(description) > 100 else ''}\n\n"
        "üí° <b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–Ω–∏–≥–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> EPUB, FB2, MOBI\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ books/war_and_peace.epub\n"
        "‚Ä¢ books/crime_and_punishment.fb2\n"
        "‚Ä¢ books/master_and_margarita.mobi",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(StateFilter(BookManagementStates.waiting_for_file_path))
async def process_book_file(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–Ω–∏–≥–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    file_path = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
    data = await state.get_data()
    title = data.get('book_title')
    author = data.get('book_author')
    description = data.get('book_description', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    files = {}
    if file_path and file_path.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        if file_path.lower().endswith('.epub'):
            files['epub'] = file_path
        elif file_path.lower().endswith('.fb2'):
            files['fb2'] = file_path
        elif file_path.lower().endswith('.mobi'):
            files['mobi'] = file_path
        else:
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: EPUB, FB2, MOBI\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            )
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if book_service.add_book(title, author, description, files):
        bot_logger.log_admin_action(message.from_user.id, f"–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏: {title}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"""
‚úÖ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:200]}{'...' if len(description) > 200 else ''}
        """
        
        if files:
            formats = ', '.join(files.keys()).upper()
            success_text += f"\nüìÅ <b>–§–æ—Ä–º–∞—Ç—ã:</b> {formats}"
        else:
            success_text += "\nüìÅ <b>–§–æ—Ä–º–∞—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="add_another_book")],
            [InlineKeyboardButton(text="üîô –ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_back")]
        ])
        
        await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


@router.callback_query(lambda c: c.data == "cancel_addbook")
async def cancel_addbook(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_back")]
    ])
    
    await callback.message.edit_text(
        "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    await state.update_data(book_description="")
    await state.set_state(BookManagementStates.waiting_for_file_path)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_file")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addbook")]
    ])
    
    data = await state.get_data()
    title = data.get('book_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    author = data.get('book_author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
        f"‚úÖ <b>–ê–≤—Ç–æ—Ä:</b> {author}\n"
        f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ù–µ —É–∫–∞–∑–∞–Ω–æ\n\n"
        "üí° <b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–Ω–∏–≥–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> EPUB, FB2, MOBI\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ books/war_and_peace.epub\n"
        "‚Ä¢ books/crime_and_punishment.fb2\n"
        "‚Ä¢ books/master_and_margarita.mobi",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data == "skip_file")
async def skip_file(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
    data = await state.get_data()
    title = data.get('book_title')
    author = data.get('book_author')
    description = data.get('book_description', '')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    if book_service.add_book(title, author, description):
        bot_logger.log_admin_action(callback.from_user.id, f"–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏: {title}")
        
        success_text = f"""
‚úÖ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:200]}{'...' if len(description) > 200 else ''}
üìÅ <b>–§–æ—Ä–º–∞—Ç—ã:</b> –ù–µ —É–∫–∞–∑–∞–Ω—ã
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="add_another_book")],
            [InlineKeyboardButton(text="üîô –ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_back")]
        ])
        
        await callback.message.edit_text(success_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


@router.callback_query(lambda c: c.data == "add_another_book")
async def add_another_book(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
    
    Args:
        callback (CallbackQuery): Callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    await cmd_addbook(callback.message, state)


@router.message(Command("checkcalibre"))
@admin_required
async def cmd_checkcalibre(message: Message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É Calibre –∏ –¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        
    Returns:
        None
    """
    bot_logger.log_admin_action(message.from_user.id, "–ø—Ä–æ–≤–µ—Ä–∫–∞ Calibre")
    
    if book_converter.check_calibre_installed():
        await message.answer(
            "‚úÖ <b>Calibre —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n"
            f"üìÅ <b>–ü—É—Ç—å:</b> {book_converter.calibre_path}\n"
            f"üñ•Ô∏è <b>–û–°:</b> {'Windows' if book_converter.is_windows else 'Linux/Ubuntu'}\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /uploadbook –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥!",
            parse_mode="HTML"
        )
    else:
        instructions = book_converter.get_installation_instructions()
        await message.answer(
            "‚ùå <b>Calibre –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–∏–≥–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Calibre:\n\n"
            f"{instructions}\n\n"
            "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkcalibre –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            parse_mode="HTML"
        )


@router.message(StateFilter(BookManagementStates.waiting_for_zip_file))
async def process_zip_file(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å FB2 —Ñ–∞–π–ª–æ–º
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å ZIP-—Ñ–∞–π–ª–æ–º
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
        
    Returns:
        None
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if not message.document:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å FB2 —Ñ–∞–π–ª–æ–º!\n"
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å FB2 —Ñ–∞–π–ª."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 50MB)
    if message.document.file_size > 50 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50MB"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_name = message.document.file_name.lower()
    if not file_name.endswith('.zip'):
        await message.answer(
            "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤."
        )
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é ZIP-–∞—Ä—Ö–∏–≤...")
        
        file_info = await message.bot.get_file(message.document.file_id)
        zip_path = f"temp/{message.document.file_name}"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        Path("temp").mkdir(exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_info.file_path, zip_path)
        
        await message.answer("üîç –ò–∑–≤–ª–µ–∫–∞—é FB2 —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º FB2 —Ñ–∞–π–ª
        fb2_path = fb2_parser.extract_fb2_from_zip(zip_path)
        if not fb2_path:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å FB2 —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ZIP-–∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç FB2 —Ñ–∞–π–ª."
            )
            return
        
        await message.answer("üìñ –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö FB2 —Ñ–∞–π–ª–∞...")
        
        # –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = fb2_parser.parse_fb2_metadata(fb2_path)
        if not metadata:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ FB2 —Ñ–∞–π–ª–∞!\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FB2 —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        title = metadata.get('title')
        author = metadata.get('author')
        
        if not title or not author:
            await message.answer(
                "‚ùå –í FB2 —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ!\n"
                "–¢—Ä–µ–±—É—é—Ç—Å—è: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞
        existing_book = book_service.get_book(title)
        if existing_book:
            await message.answer(
                f"‚ùå –ö–Ω–∏–≥–∞ <b>¬´{title}¬ª</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ!",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Calibre
        if not book_converter.check_calibre_installed():
            instructions = book_converter.get_installation_instructions()
            await message.answer(
                f"‚ùå <b>Calibre –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
                f"–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–Ω–∏–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Calibre:\n\n"
                f"{instructions}\n\n"
                f"–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.",
                parse_mode="HTML"
            )
            return
        
        await message.answer("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ EPUB –∏ MOBI...")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
        converted_files = book_converter.convert_book_formats(fb2_path)
        
        await message.answer("üì§ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã –≤ Telegram...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ Telegram
        telegram_file_ids = await telegram_uploader.upload_book_formats(
            message.bot, converted_files, message.chat.id
        )
        
        await message.answer("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        description = metadata.get('description', '')
        year = metadata.get('year')
        genres = metadata.get('genres', [])
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        extended_metadata = {
            'year': year,
            'genres': genres,
            'created_date': metadata.get('created_date'),
            'telegram_file_ids': telegram_file_ids
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if book_service.add_book(title, author, description, converted_files, extended_metadata):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""
‚úÖ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üìö <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:200]}{'...' if len(description) > 200 else ''}
            """
            
            if year:
                success_text += f"\nüìÖ <b>–ì–æ–¥:</b> {year}"
            
            if genres:
                success_text += f"\nüé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(genres)}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            formats = list(converted_files.keys())
            success_text += f"\nüìÅ <b>–§–æ—Ä–º–∞—Ç—ã:</b> {', '.join(formats).upper()}"
            
            success_text += f"\n\nüì§ <b>–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Telegram –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞!</b>"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìö –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="add_another_book")],
                [InlineKeyboardButton(text="üîô –ö –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_back")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard, parse_mode="HTML")
            
            bot_logger.log_admin_action(message.from_user.id, f"–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ ZIP: {title}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_files = [zip_path, fb2_path] + list(converted_files.values())
        for file_path in temp_files:
            fb2_parser.clean_temp_files(file_path)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
        
    except Exception as e:
        bot_logger.log_error(e, f"–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP —Ñ–∞–π–ª–∞: {message.document.file_name}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.clear() 