"""
@file: utils/access_control.py
@description: –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
@dependencies: services.users, functools
@created: 2025-01-03
"""

from functools import wraps
from typing import Callable, Any, Awaitable

from services.users import user_service
from utils.logger import bot_logger


def active_user_required(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'active'
    """
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç Message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        message = None
        for arg in args:
            if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                message = arg
                break
        
        if not message:
            return await func(*args, **kwargs)
        
        user_id = str(message.from_user.id)
        user_info = user_service.get_user(user_id)
        
        if not user_info or user_info.get('status') != 'active':
            await message.answer(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register"
            )
            bot_logger.log_security_event("–ø–æ–ø—ã—Ç–∫–∞_–¥–æ—Å—Ç—É–ø–∞_–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message.from_user.id)
            return
        
        return await func(*args, **kwargs)
    
    return wrapper


def admin_required(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç Message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        message = None
        for arg in args:
            if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                message = arg
                break
        
        if not message:
            return await func(*args, **kwargs)
        
        user_id = str(message.from_user.id)
        user_info = user_service.get_user(user_id)
        
        if not user_info or user_info.get('status') != 'active':
            await message.answer(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register"
            )
            bot_logger.log_security_event("–ø–æ–ø—ã—Ç–∫–∞_–¥–æ—Å—Ç—É–ø–∞_–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", message.from_user.id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(message.from_user.id) not in user_service.get_admin_ids():
            await message.answer(
                "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            bot_logger.log_security_event("–ø–æ–ø—ã—Ç–∫–∞_–¥–æ—Å—Ç—É–ø–∞_–Ω–µ–∞–¥–º–∏–Ω–∞", message.from_user.id)
            return
        
        return await func(*args, **kwargs)
    
    return wrapper


def get_user_status(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_info = user_service.get_user(str(user_id))
    return user_info.get('status', 'unknown') if user_info else 'unknown'


def is_user_active(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    """
    return get_user_status(user_id) == 'active'


def is_user_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    return str(user_id) in user_service.get_admin_ids()


def get_available_commands(user_id: int) -> list[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    commands = ['/start', '/help']
    status = get_user_status(user_id)
    
    if status == 'inactive':
        commands.append('/register')
        return commands
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if status == 'banned':
        return commands  # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if status == 'active':
        commands.extend([
            '/profile',
            '/search',
            '/schedule'
        ])
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if is_user_admin(user_id):
            commands.extend([
                '/admin',
                '/ban',
                '/unban',
                '/userinfo',
                '/users',
                '/stats',
                '/spamstats',
                '/addbook'
            ])
    
    return commands 