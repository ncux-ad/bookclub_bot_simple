"""
@file: utils/env_validator.py
@description: –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
@dependencies: os, re, typing
@created: 2024-01-15
"""

import os
import re
from typing import Dict, List, Optional, Tuple
from pathlib import Path


class EnvValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.errors: List[str] = []
        self.warnings: List[str] = []
    
    def validate_bot_token(self, token: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
        if not token:
            self.errors.append("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
        if not re.match(r'^\d+:[A-Za-z0-9_-]{35}$', token):
            # –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞
            if token == "1234567890:ABCdefGHIjklMNOpqrsTUVwxyz":
                self.warnings.append("BOT_TOKEN –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
                return True
            self.errors.append("BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return False
        
        return True
    
    def validate_secret_phrase(self, phrase: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã"""
        if not phrase:
            self.warnings.append("SECRET_PHRASE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return True
        
        if len(phrase) < 6:
            self.errors.append("SECRET_PHRASE –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            return False
        
        if len(phrase) > 50:
            self.errors.append("SECRET_PHRASE —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return False
        
        return True
    
    def validate_admin_ids(self, admin_ids_str: str) -> Tuple[bool, List[int]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        admin_ids = []
        
        if not admin_ids_str:
            self.warnings.append("ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True, admin_ids
        
        try:
            admin_ids = [int(x.strip()) for x in admin_ids_str.split(",") if x.strip()]
        except ValueError:
            self.errors.append("ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return False, []
        
        if not admin_ids:
            self.warnings.append("ADMIN_IDS –ø—É—Å—Ç–æ–π, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True, admin_ids
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if len(admin_ids) != len(set(admin_ids)):
            self.errors.append("ADMIN_IDS —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã")
            return False, []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ID
        for admin_id in admin_ids:
            if admin_id <= 0:
                self.errors.append(f"ADMIN_ID {admin_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return False, []
        
        return True, admin_ids
    
    def validate_file_paths(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º"""
        required_dirs = ['books', 'data', 'logs']
        
        for dir_name in required_dirs:
            dir_path = Path(dir_name)
            if not dir_path.exists():
                try:
                    dir_path.mkdir(parents=True, exist_ok=True)
                    self.warnings.append(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}")
                except Exception as e:
                    self.errors.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {dir_name}: {e}")
                    return False
        
        return True
    
    def validate_all(self) -> Tuple[bool, Dict[str, any]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.errors.clear()
        self.warnings.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv("BOT_TOKEN", "")
        secret_phrase = os.getenv("SECRET_PHRASE", "bookclub2024")
        admin_ids_str = os.getenv("ADMIN_IDS", "")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        token_valid = self.validate_bot_token(bot_token)
        phrase_valid = self.validate_secret_phrase(secret_phrase)
        admin_ids_valid, admin_ids = self.validate_admin_ids(admin_ids_str)
        paths_valid = self.validate_file_paths()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        is_valid = token_valid and phrase_valid and admin_ids_valid and paths_valid
        
        result = {
            "bot_token": bot_token if token_valid else "",
            "secret_phrase": secret_phrase,
            "admin_ids": admin_ids,
            "is_valid": is_valid,
            "errors": self.errors.copy(),
            "warnings": self.warnings.copy()
        }
        
        return is_valid, result
    
    def print_validation_report(self, result: Dict[str, any]) -> None:
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üîç –û—Ç—á–µ—Ç –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("=" * 50)
        
        if result["is_valid"]:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        if result["errors"]:
            print("\n‚ùå –û—à–∏–±–∫–∏:")
            for error in result["errors"]:
                print(f"  - {error}")
        
        if result["warnings"]:
            print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
            for warning in result["warnings"]:
                print(f"  - {warning}")
        
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        print(f"  BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if result['bot_token'] else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"  SECRET_PHRASE: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if result['secret_phrase'] else '‚ö†Ô∏è –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
        print(f"  ADMIN_IDS: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if result['admin_ids'] else '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}")
        
        print("=" * 50)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
env_validator = EnvValidator() 