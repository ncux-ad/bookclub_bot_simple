import asyncio
import json
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config_simple import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_json(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return load_json('users_simple.json')

def load_books():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–Ω–∏–≥–∏"""
    return load_json('books_simple.json')

def load_events():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
    return load_json('events_simple.json')

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) in [str(admin_id) for admin_id in settings.ADMIN_IDS]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id not in users:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–±!\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register <—Å–µ–∫—Ä–µ—Ç–Ω–∞—è_—Ñ—Ä–∞–∑–∞>"
        )
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )

@dp.message(Command("register"))
async def cmd_register(message: Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id in users:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã
    args = message.text.split()
    if len(args) < 2 or args[1] != settings.SECRET_PHRASE:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞!")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id] = {
        "name": message.from_user.first_name,
        "username": message.from_user.username,
        "registered_at": datetime.now().isoformat(),
        "status": "active"
    }
    save_json('users_simple.json', users)
    
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

@dp.message(Command("books"))
async def cmd_books(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"""
    books = load_books()
    
    if not books:
        await message.answer("üìö –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    for book_title in books.keys():
        keyboard.append([InlineKeyboardButton(text=book_title, callback_data=f"book:{book_title}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith('book:'))
async def process_book_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    book_title = callback.data.split(':', 1)[1]
    books = load_books()
    
    if book_title not in books:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    book_info = books[book_title]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    text = f"üìñ <b>{book_title}</b>\n\n"
    if 'author' in book_info:
        text += f"üë§ –ê–≤—Ç–æ—Ä: {book_info['author']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    formats = []
    for fmt in ['epub', 'fb2', 'mobi']:
        if f'{fmt}_file' in book_info:
            formats.append(fmt.upper())
    
    if formats:
        text += f"üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
        keyboard = []
        for fmt in formats:
            keyboard.append([InlineKeyboardButton(
                text=fmt, 
                callback_data=f"download:{book_title}:{fmt.lower()}"
            )])
        keyboard.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back_to_books")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    else:
        await callback.answer("–§–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")

@dp.callback_query(lambda c: c.data.startswith('download:'))
async def process_download(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    _, book_title, format_type = callback.data.split(':', 2)
    books = load_books()
    
    if book_title not in books:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    book_info = books[book_title]
    file_key = f'{format_type}_file'
    
    if file_key in book_info:
        try:
            file_path = book_info[file_key]
            if os.path.exists(file_path):
                await bot.send_document(
                    chat_id=callback.from_user.id,
                    document=types.FSInputFile(file_path),
                    caption=f"üìö {book_title} ({format_type.upper()})"
                )
                await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!")
    else:
        await callback.answer("–≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")

@dp.callback_query(lambda c: c.data == "back_to_books")
async def back_to_books(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥"""
    books = load_books()
    
    keyboard = []
    for book_title in books.keys():
        keyboard.append([InlineKeyboardButton(text=book_title, callback_data=f"book:{book_title}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.edit_text("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=markup)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üìö <b>–ö–æ–º–∞–Ω–¥—ã –∫–Ω–∏–∂–Ω–æ–≥–æ –∫–ª—É–±–∞:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/register <—Ñ—Ä–∞–∑–∞> - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–ª—É–±–µ
/books - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("schedule"))
async def cmd_schedule(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á"""
    events = load_events()
    
    if not events:
        await message.answer("üìÖ –í—Å—Ç—Ä–µ—á–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    
    text = "üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n"
    
    for event_id, event in events.items():
        text += f"üìñ <b>{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
        text += f"üìÖ –î–∞—Ç–∞: {event.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {event.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        if event.get('description'):
            text += f"üìù {event['description']}\n"
        text += "\n"
    
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id not in users:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register")
        return
    
    user_info = users[user_id]
    text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

üìù –ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üÜî ID: {user_id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚úÖ –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}
    """
    
    await message.answer(text, parse_mode="HTML")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏", callback_data="admin_books")],
        [InlineKeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", callback_data="admin_events")]
    ]
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    users = load_users()
    books = load_books()
    events = load_events()
    
    active_users = sum(1 for user in users.values() if user.get('status') == 'active')
    
    text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—É–±–∞:</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(users)} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users})
üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(books)}
üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {len(events)}
    """
    
    await callback.message.edit_text(text, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    users = load_users()
    
    if not users:
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user_id, user_info in users.items():
            text += f"üÜî {user_id}\n"
            text += f"üìù {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"‚úÖ –°—Ç–∞—Ç—É—Å: {user_info.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info.get('registered_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_books")
async def admin_books(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    books = load_books()
    
    if not books:
        text = "üìö –ö–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìö <b>–ö–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:</b>\n\n"
        for title, info in books.items():
            text += f"üìñ {title}\n"
            if 'author' in info:
                text += f"üë§ {info['author']}\n"
            text += "\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_events")
async def admin_events(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤!")
        return
    
    events = load_events()
    
    if not events:
        text = "üìÖ –°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
    else:
        text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event_id, event in events.items():
            text += f"üìñ {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            text += f"üìÖ {event.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"‚è∞ {event.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    await callback.message.edit_text(text, parse_mode="HTML")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 